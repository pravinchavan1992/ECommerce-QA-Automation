name: Remote Execution

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      browser:
        description: 'Select browser'
        required: true
        default: 'chrome'
        type: choice
        options: ['chrome', 'firefox', 'edge']
      runType:
        description: 'Select Runtype'
        required: true
        default: 'remote'
        type: string # Could be 'choice' if fixed options, e.g., ['remote', 'local']
      headless:
        description: 'Run tests in headless mode?'
        required: false
        default: 'true'
        type: boolean

jobs:
  Run-Selenium-Tests:
    runs-on: ubuntu-latest

    steps:
      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin # For newer systems, this installs the plugin allowing 'docker compose'
          # OR for older systems that use the standalone binary:
          # sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          # sudo chmod +x /usr/local/bin/docker-compose
      - name: Set up Selenium Grid Environment
        # Assumes docker-compose-v3.yml is in the root of the repository
        run: docker-compose -f docker-compose-v3.yml up -d

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Java & Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Install Allure CLI
        # Installs Allure command-line tool globally for report generation
        run: npm install -g allure-commandline --save-dev

      - name: Run Selenium Tests
        run: |
          echo "Running tests with browser=${{ github.event.inputs.browser }}, headless=${{ github.event.inputs.headless }}, runType=${{ github.event.inputs.runType }}"
          # Executes Maven tests, passing workflow inputs as system properties
          mvn clean test -Dbrowser=${{ github.event.inputs.browser }} \
                         -Dheadless=${{ github.event.inputs.headless }} \
                         -DrunType=${{ github.event.inputs.runType }}

      - name: Check if allure-results directory exists
        # This step always runs, even if previous steps fail, to check for results
        if: always()
        run: |
          echo "Checking target directory structure..."
          ls -R target # Lists contents of target directory for debugging
          if [ ! -d "target/allure-results" ]; then
            echo "‚ùå Allure results folder not found! Skipping report generation."
            exit 1 # Exits with an error if results folder is missing
          fi

      - name: Generate Allure Report
        # This step always runs after the check, assuming results exist
        if: always()
        run: |
          set -e # Exit immediately if a command exits with a non-zero status
          allure generate target/allure-results --clean -o target/allure-report

      - name: Upload Allure HTML Report
        # This step always runs to upload the generated report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report-${{ github.sha }} # Unique name for the artifact
          path: target/allure-report # Path to the generated Allure HTML report
          if-no-files-found: error # Fail the workflow if the report directory is empty
